#! /bin/bash

### BEGIN INIT INFO
# Provides:		mydlp
# Required-Start:	$local_fs $remote_fs $network $named $time mysql
# Required-Stop:	$local_fs $remote_fs $network $named $time mysql
# Should-Start:		mail-transport-agent
# Should-Stop:		mail-transport-agent
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	An open source data loss prevention solution.
### END INIT INFO

PATH=/usr/bin:/usr/sbin:/bin:/sbin

ERLANG=/usr/bin/erl
JSVCBIN=/usr/bin/jsvc
#JAVA_HOME=/usr/lib/jvm/java-6-sun
JAVA_HOME=/usr/lib/jvm/java-6-openjdk
CDJAR=/usr/share/java/commons-daemon.jar
MBJAR=/usr/share/mydlp/backend/mydlp-backend-1.0-jar-with-dependencies.jar
BERRLOG=/var/log/mydlp/backend-error.log
BOUTLOG=/var/log/mydlp/backend.log
BDAEMON=com.mydlp.backend.Bootstrap

HOMEDIR=/etc/mydlp

PIDDIR=/var/run/mydlp
PIDFILE=$PIDDIR/mydlp.pid
PIDFILE2=$PIDDIR/backend.pid
PIDFILE3=/var/run/jetty.pid

SERV=/usr/sbin/service
MYSQLC=/usr/bin/mysql
MYSQLADM=/usr/bin/mysqladmin

SQUIDBIN=/usr/sbin/squid3
SQUIDBINNAME=squid3
SQUIDSSLCRTDDIR=/var/lib/ssl_db/

ICAPPORT=1344
JETTYPORT=8009
BACKENDPORT=9090

. /lib/lsb/init-functions

ERLANG_NODE_NAME="-sname system"
ERLANG_EXTRA_OPTS="-env ERL_MAX_ETS_TABLES 20000"

if test -f /etc/default/mydlp; then
	. /etc/default/mydlp
fi

ERLANG_OPTS="$ERLANG_NODE_NAME -noshell -detached $ERLANG_EXTRA_OPTS"

JSVC="$JSVCBIN -home $JAVA_HOME -cp $CDJAR:$MBJAR -pidfile $PIDFILE2"
JSVC_STARTOPTS="-outfile $BOUTLOG -errfile $BERRLOG $BDAEMON"

check_piddir() {
	[ -d $PIDDIR ] || \
		mkdir -p $PIDDIR
}

is_mysql_alive() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	$MYSQLADM -s ping >/dev/null 2>&1  
}

is_tables_initialized() {
	[ -n "$(echo 'show tables'|$MYSQLC mydlp|grep -e '^Rule$')" ] && \
	[ -n "$(echo 'show tables'|$MYSQLC mydlp|grep -e '^Config$')" ] && \
	[ -n "$(echo 'show tables'|$MYSQLC mydlp_log|grep -e '^IncidentLog$')" ]
}

wait_for_mysqld() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	for i in $(seq 10); do
	    sleep 1
	    if is_mysql_alive; then break; fi
	done
}

wait_for_tables() {
	for i in $(seq 60); do
		sleep 1
		if is_tables_initialized; then 
			return 0
		fi
	done
	return 1
}

is_port_open() {
	local PORTNUM=$1
	netstat -nltp 2>/dev/null|grep LISTEN|awk '-F ' '{print $4;}'|awk -F: '{print $NF;}'|grep -qe "^$PORTNUM$"
}

wait_for_icap() {
	for i in $(seq 10); do
	    sleep 1
	    if is_port_open $ICAPPORT; then break; fi
	done
}

wait_for_backend() {
	for i in $(seq 10); do
	    sleep 1
	    if is_port_open $BACKENDPORT; then break; fi
	done
}

start_mysql() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	start_mysqld
	check_mysql_db
}

start_mysqld() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	is_mysql_alive || $SERV mysql start >/dev/null 2>&1 
	wait_for_mysqld
}

check_mysql_db() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi

	# Import MySQL schema
	if (echo|$MYSQLC); then
		if [ -z "$(echo 'show databases'|$MYSQLC|grep -e '^mydlp$')" ]; then
			echo " * Creating MySQL database (mydlp)..."
			$MYSQLADM create mydlp
		fi
		if [ -z "$(echo 'show databases'|$MYSQLC|grep -e '^mydlp_log$')" ]; then
			echo " * Creating MySQL database (mydlp_log)..."
			$MYSQLADM create mydlp_log
		fi
	else
		echo "Cannot find mysql-client!!!"
	fi
}

start_mydlp() {
	log_daemon_msg "Starting MyDLP" "mydlp"
        if HOME=$HOMEDIR start-stop-daemon --start --quiet --oknodo --chdir $HOMEDIR --pidfile $PIDFILE --exec $ERLANG -- $ERLANG_OPTS -config mydlp-sasl -boot mydlp; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
}

stop_mydlp() {
	if status_mydlp; then
		log_daemon_msg "Stopping MyDLP" "mydlp"
		if start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE; then
		    log_end_msg 0
		else
		    log_end_msg 1
		fi
	else
		echo " * MyDLP is not running..."
	fi
}

status_mydlp() {
        status_of_proc -p $PIDFILE mydlp MyDLP 2>&1 > /dev/null 
}

cleanpids() {
	status_mydlp || rm -f $PIDFILE
	status_backend || rm -f $PIDFILE2
	status_jetty || rm -f $PIDFILE3
}

start_backend() {
	log_daemon_msg "Starting MyDLP Backend" "mydlp"
        if $JSVC $JSVC_STARTOPTS; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
	wait_for_backend
}

stop_backend() {
	if status_backend; then
		log_daemon_msg "Stopping MyDLP Backend" "mydlp"
		if $JSVC -stop $BDAEMON; then
		    log_end_msg 0
		else
		    log_end_msg 1
		fi
	else
		echo " * MyDLP Backend is not running..."
	fi
}

status_backend() {
        status_of_proc -p $PIDFILE2 mydlp MyDLP 2>&1 > /dev/null 
}

start_jetty() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	echo " * Starting Jetty..."
	$SERV jetty start > /dev/null
	if is_tables_initialized ; then
		true
	else
		echo -n " * Waiting for database tables... "
		wait_for_tables || (echo -n " * Tables could not been initialized... Exiting."; exit 1)
		echo "OK"
	fi
}

stop_jetty() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	if status_jetty; then
		echo " * Stopping Jetty..."
		$SERV jetty stop 2>&1 > /dev/null
	else
		echo " * Jetty is not running..."
	fi
}

status_jetty() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	$SERV jetty status 2>&1 > /dev/null
}

is_squid_alive() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi
	SQUIDPID=$(pgrep $SQUIDBINNAME)
	[ -n "$SQUIDPID" ]
}


reload_squid() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi
	wait_for_icap
	if is_squid_alive; then
		echo " * Reloading Squid..."
		[ -x $SQUIDBIN ] && $SQUIDBIN -k reconfigure
	fi
}

ensure_squid() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi
	is_squid_alive || $SERV squid3 start
}

ensure_squid_ssl_crtd_dir_rights() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi
	[ -d $SQUIDSSLCRTDDIR ] || mkdir $SQUIDSSLCRTDDIR
	chown proxy.proxy -R $SQUIDSSLCRTDDIR
}

ensure_postfix() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0;
	fi
	is_postfix_alive || $SERV postfix start
}

is_postfix_alive_i() {
	queue=$(postconf -h queue_directory 2>/dev/null || echo /var/spool/postfix)
	if [ -f ${queue}/pid/master.pid ]; then
		pid=$(sed 's/ //g' ${queue}/pid/master.pid)
		# what directory does the executable live in.  stupid prelink systems.
		dir=$(ls -l /proc/$pid/exe 2>/dev/null | sed 's/.* -> //; s/\/[^\/]*$//')
		if [ "X$dir" = "X/usr/lib/postfix" ]; then
			echo y
		fi
	fi
}

is_postfix_alive() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0;
	fi
	POSTFIX_RUNNING=$(is_postfix_alive_i)
	[ -n "$POSTFIX_RUNNING" ]
}

ensure_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
                return 0;
        fi
	is_apache_alive || start_apache
}

start_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
                return 0;
        fi
	echo " * Starting Apache Web Server..."
	$SERV apache2 start 2>&1 > /dev/null
}

is_apache_alive() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then 
                return 0;
        fi
	$SERV apache2 status 2>&1 > /dev/null
}

stop_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then 
                return 0;
        fi
	echo " * Stopping Apache Web Server..."
	$SERV apache2 stop 2>&1 > /dev/null
}

case "$1" in
  start)
	check_piddir
	cleanpids
	start_mysql
	start_jetty
	start_backend
	ensure_postfix
	start_mydlp
	cleanpids
	ensure_squid
	reload_squid
	ensure_apache
	;;
  stop)
	check_piddir
	cleanpids
	stop_apache
	stop_mydlp
	stop_backend
	stop_jetty
	cleanpids
	;;

  reload|force-reload)
	;;

  restart)
	check_piddir
	cleanpids
	stop_apache
	stop_mydlp
	stop_backend
	stop_jetty
	cleanpids
	sleep 1
	start_mysql
	start_jetty
	start_backend
	ensure_postfix
	start_mydlp
	cleanpids
	ensure_squid
	reload_squid
	ensure_apache
	;;

  status)
	check_piddir
        status_mydlp && exit 0 || exit $?
	;;

  *)
	log_action_msg "Usage: /etc/init.d/mydlp {start|stop|reload|force-reload|restart|status}"
	exit 1
esac

exit 0
