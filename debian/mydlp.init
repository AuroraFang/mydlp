#! /bin/bash

### BEGIN INIT INFO
# Provides:		mydlp
# Required-Start:	$local_fs $remote_fs $network $named $time mysql
# Required-Stop:	$local_fs $remote_fs $network $named $time mysql
# Should-Start:		mail-transport-agent
# Should-Stop:		mail-transport-agent
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	An open source data loss prevention solution.
### END INIT INFO

PATH=/usr/bin:/usr/sbin:/bin:/sbin

ERLANG=/usr/bin/erl

HOMEDIR=/etc/mydlp

PIDDIR=/var/run/mydlp
PIDFILE=$PIDDIR/mydlp.pid
PIDFILE2=$PIDDIR/backend.pid
PIDFILE3=/var/run/jetty.pid
PIDFILE4=/var/run/tomcat6.pid

SERV=/usr/sbin/service
MYSQLC=/usr/bin/mysql
MYSQLADM=/usr/bin/mysqladmin
SCHEMADIR=/usr/share/mydlp/schema

SQUIDBIN=/usr/sbin/squid3
SQUIDBINNAME=squid3
SQUIDSSLCRTDDIR=/var/lib/ssl_db/

POSTQUEUEBIN=/usr/sbin/postqueue

ICAPPORT=1344
SMTPCFPORT=10026
SMTPINTPORT=10027
JETTYPORT=8009
BACKENDPORT=9090
TOMCATPORT=8010

ERLANG_EXTRA_OPTS="+fnu +K true +P 524288 +A 30 -smp auto -env ERL_MAX_ETS_TABLES 32768 -env ERL_MAX_PORTS 1048576"

. /lib/lsb/init-functions

if test -f /etc/default/mydlp; then
	. /etc/default/mydlp
fi

ERLANG_MYDLP_OPTS=""

if [ -n "$LICENSE_PROXY_HOST" -a -n "$LICENSE_PROXY_PORT" ]; then
	ERLANG_MYDLP_OPTS="$ERLANG_MYDLP_OPTS -env LICENSE_PROXY_HOST $LICENSE_PROXY_HOST -env LICENSE_PROXY_PORT $LICENSE_PROXY_PORT"
fi

ERLANG_NODE_NAME="-sname system"
ERLANG_OPTS="$ERLANG_NODE_NAME -noshell -detached $ERLANG_EXTRA_OPTS $ERLANG_MYDLP_OPTS"

BACKEND_CTL=/usr/sbin/mydlp-backend-ctl

check_piddir() {
	[ -d $PIDDIR ] || \
		mkdir -p $PIDDIR
}

is_mysql_alive() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	$MYSQLADM -s ping >/dev/null 2>&1  
}

is_tables_initialized() {
	[ -n "$(echo 'show tables'|$MYSQLC mydlp|grep -e '^Rule$')" ] && \
	[ -n "$(echo 'show tables'|$MYSQLC mydlp|grep -e '^Config$')" ] && \
	[ -n "$(echo 'show tables'|$MYSQLC mydlp_log|grep -e '^IncidentLog$')" ]
}

wait_for_mysqld() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	for i in $(seq 10); do
	    sleep 1
	    if is_mysql_alive; then break; fi
	done
}

wait_for_tables() {
	for i in $(seq 60); do
		sleep 1
		if is_tables_initialized; then 
			return 0
		fi
	done
	return 1
}

is_port_open() {
	local PORTNUM=$1
	netstat -nltp 2>/dev/null|grep LISTEN|awk '-F ' '{print $4;}'|awk -F: '{print $NF;}'|grep -qe "^$PORTNUM$"
}

wait_for_port() {
	local PORTNUM=$1
	local TRYCOUNT=$2
	for i in $(seq $TRYCOUNT); do
	    sleep 1
		if is_port_open $PORTNUM; then
			break
		else
			sleep 1
			true
		fi
	done
}


wait_for_jetty() {
	wait_for_port $JETTYPORT 30
}

wait_for_tomcat() {
	wait_for_port $TOMCATPORT 30
}

wait_for_icap() {
	wait_for_port $ICAPPORT 15
}

wait_for_smtpcf() {
	wait_for_port $SMTPCFPORT 15
}

wait_for_smtpint() {
	wait_for_port $SMTPINTPORT 15
}

wait_for_backend() {
	wait_for_port $BACKENDPORT 15
}

start_mysql() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	start_mysqld
	check_mysql_db
}

start_mysqld() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi
	is_mysql_alive || $SERV mysql start >/dev/null 2>&1 
	wait_for_mysqld
}

create_db() {
	local DBNAME=$1
	echo "CREATE DATABASE $DBNAME DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci"|$MYSQLC
}

check_mysql_db() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                return 0;
        fi

	# Import MySQL schema
	if (echo|$MYSQLC); then
		if [ -z "$(echo 'show databases'|$MYSQLC|grep -e '^mydlp$')" ]; then
			echo " * Initializing MyDLP Policy database..."
			create_db mydlp
			$MYSQLC mydlp < $SCHEMADIR/HEAD_mydlp.sql
		fi
		if [ -z "$(echo 'show databases'|$MYSQLC|grep -e '^mydlp_log$')" ]; then
			echo " * Initializing MyDLP Log database..."
			create_db mydlp_log
			$MYSQLC mydlp_log < $SCHEMADIR/HEAD_mydlp_log.sql
		fi
	else
		echo "Cannot find mysql-client!!!"
	fi
}

start_mydlp() {
	log_daemon_msg "Starting MyDLP" "mydlp"
        if HOME=$HOMEDIR start-stop-daemon --start --quiet --oknodo --chdir $HOMEDIR --pidfile $PIDFILE --exec $ERLANG -- $ERLANG_OPTS -config mydlp-sasl -boot mydlp; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
}

stop_mydlp() {
	if status_mydlp; then
		log_daemon_msg "Stopping MyDLP" "mydlp"
		if start-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE; then
		    log_end_msg 0
		else
		    log_end_msg 1
		fi
	else
		echo " * MyDLP is not running..."
	fi
}

status_mydlp() {
        status_of_proc -p $PIDFILE mydlp MyDLP 2>&1 > /dev/null 
}

cleanpids() {
	status_mydlp || rm -f $PIDFILE
	status_backend || rm -f $PIDFILE2
	status_jetty || rm -f $PIDFILE3
	status_tomcat || rm -f $PIDFILE4
}

start_backend() {
	log_daemon_msg "Starting MyDLP Backend" "mydlp"
        if $BACKEND_CTL start; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
	wait_for_backend
}

stop_backend() {
	if status_backend; then
		log_daemon_msg "Stopping MyDLP Backend" "mydlp"
		if $BACKEND_CTL stop; then
		    log_end_msg 0
		else
		    log_end_msg 1
		fi
	else
		echo " * MyDLP Backend is not running..."
	fi
}

status_backend() {
        status_of_proc -p $PIDFILE2 mydlp MyDLP 2>&1 > /dev/null 
}

start_jetty() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	echo " * Starting MyDLP UI..."
	$SERV jetty start > /dev/null
	if is_tables_initialized ; then
		true
	else
		echo -n " * Waiting for database tables... "
		wait_for_tables || (echo -n " * Tables could not been initialized... Exiting."; exit 1)
		echo "OK"
	fi
}

stop_jetty() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	if status_jetty; then
		echo " * Stopping MyDLP UI..."
		$SERV jetty stop 2>&1 > /dev/null
	else
		echo " * MyDLP UI is not running..."
	fi
}

status_jetty() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	$SERV jetty status 2>&1 > /dev/null
}

start_tomcat() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	echo " * Starting SOLR..."
	$SERV tomcat6 start > /dev/null
}

stop_tomcat() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	if status_tomcat; then
		echo " * Stopping SOLR..."
		$SERV tomcat6 stop 2>&1 > /dev/null
	else
		echo " * SOLR is not running..."
	fi
}

status_tomcat() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
		return 0;
	fi
	$SERV tomcat6 status 2>&1 > /dev/null
}

is_squid_alive() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi
	SQUIDPID=$(pgrep $SQUIDBINNAME)
	[ -n "$SQUIDPID" ]
}


reload_squid() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi
	wait_for_icap
	if is_squid_alive; then
		echo " * Reloading proxy server..."
		[ -x $SQUIDBIN ] && $SQUIDBIN -k reconfigure
	fi
}

ensure_squid() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0;
	fi

	[ -d $SQUIDSSLCRTDDIR ] && chown proxy.proxy -R $SQUIDSSLCRTDDIR

	is_squid_alive || $SERV squid3 start
}

ensure_postfix() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0;
	fi
	is_postfix_alive || $SERV postfix start
	wait_for_smtpcf
	wait_for_smtpint
	echo " * Flushing mail queue..."
	[ -x $POSTQUEUEBIN ] && $POSTQUEUEBIN -f > /dev/null
}

is_postfix_alive_i() {
	queue=$(postconf -h queue_directory 2>/dev/null || echo /var/spool/postfix)
	if [ -f ${queue}/pid/master.pid ]; then
		pid=$(sed 's/ //g' ${queue}/pid/master.pid)
		# what directory does the executable live in.  stupid prelink systems.
		dir=$(ls -l /proc/$pid/exe 2>/dev/null | sed 's/.* -> //; s/\/[^\/]*$//')
		if [ "X$dir" = "X/usr/lib/postfix" ]; then
			echo y
		fi
	fi
}

is_postfix_alive() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0;
	fi
	POSTFIX_RUNNING=$(is_postfix_alive_i)
	[ -n "$POSTFIX_RUNNING" ]
}

ensure_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
                return 0;
        fi
	echo " * Waiting for SOLR to load.."
	wait_for_tomcat
	echo " * Waiting for MyDLP UI to load context..."
	wait_for_jetty
	if is_apache_alive; then
		reload_apache
	else
		start_apache
	fi
}

reload_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
                return 0;
        fi
	echo " * Reloading web server..."
	$SERV apache2 reload 2>&1 > /dev/null
}

start_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then
                return 0;
        fi
	echo " * Starting web server..."
	$SERV apache2 start 2>&1 > /dev/null
}

is_apache_alive() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then 
                return 0;
        fi
	$SERV apache2 status 2>&1 > /dev/null
}

stop_apache() {
	if [ -n "$NOJETTY" -a "$NOJETTY" == "true" ]; then 
                return 0;
        fi
	echo " * Stopping web server..."
	$SERV apache2 stop 2>&1 > /dev/null
}

appliance_stop() {
	check_piddir
	cleanpids
	stop_apache
	stop_jetty
	stop_tomcat
	stop_mydlp
	stop_backend
	cleanpids
}

appliance_start() {
	check_piddir
	cleanpids
	start_mysql
	start_backend
	start_mydlp
	start_tomcat
	start_jetty
	cleanpids
	ensure_postfix
	ensure_squid
	reload_squid
	ensure_apache
}

case "$1" in
  start)
	appliance_start
	;;
  stop)
	appliance_stop
	;;

  reload|force-reload)
	;;

  restart)
	appliance_stop
	sleep 1
	appliance_start
	;;

  status)
	check_piddir
        status_mydlp && exit 0 || exit $?
	;;

  *)
	log_action_msg "Usage: /etc/init.d/mydlp {start|stop|reload|force-reload|restart|status}"
	exit 1
esac

exit 0
