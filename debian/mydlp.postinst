#!/bin/bash 
# This script can be called in the following ways:
#
# After the package was installed:
#	<postinst> configure <old-version>
#
#
# If prerm fails during upgrade or fails on failed upgrade:
#	<old-postinst> abort-upgrade <new-version>
#
# If prerm fails during removal:
#	<old-postinst> abort-remove
#
# If prerm fails during deconfiguration of a package:
#	<postinst> abort-deconfigure in-favour <new-package> <version>
#		   removing <old-package> <version>
#
# If prerm fails during replacement due to conflict:
#	<postinst> abort-remove in-favour <new-package> <version>

OPENSSL=/usr/bin/openssl
SSLDIR=/etc/mydlp/ssl

DATEBIN=/bin/date
INIT_EPOCH=/var/lib/mydlp/init_epoch

CHOWN=/bin/chown
QUARANTINE_DIR=/var/lib/mydlp/quarantine/
REVISION_DIR=/var/lib/mydlp/revision/

LOG_DIR=/var/log/mydlp/
LOGFILE_USER_GROUP="syslog.adm"

LSBIN=/bin/ls
MYSQLC=/usr/bin/mysql
SCHEMADIFFDIR=/usr/share/mydlp/schema/diffs/

AWKBIN=/usr/bin/awk
DPKGBIN=/usr/bin/dpkg
ECHOBIN=/bin/echo

SQUIDSSLCRTDDIR=/var/lib/ssl_db/

if test -f /etc/default/mydlp; then
        . /etc/default/mydlp
fi

# Generates SSL keys
generate_keys() {
	mkdir -p $SSLDIR || exit 1

	[ -e $SSLDIR/private.pem ] || $OPENSSL genrsa 4096 > $SSLDIR/private.pem

	[ -e $SSLDIR/public.pem ] || (echo -e "TR\nAnkara\nTechnopolis\nMyDLP\nMyDLP\n*\nsupport@mydlp.com\n"| $OPENSSL req -new -x509 -days 3650 -key $SSLDIR/private.pem -out $SSLDIR/public.pem)

	[ -e $SSLDIR/user.der ] || $OPENSSL x509 -in $SSLDIR/public.pem -outform DER -out $SSLDIR/user.der
	
	return 0
}

cleanup_keys() {
	[ -d $SSLDIR ] && rm -f $SSLDIR/private.pem $SSLDIR/public.pem $SSLDIR/user.der
}

configure_apache() {
	/usr/sbin/a2enmod ssl
	/usr/sbin/a2enmod proxy
	/usr/sbin/a2enmod proxy_ajp
	/usr/sbin/a2enmod rewrite
	/usr/sbin/a2dissite default-ssl
	/usr/sbin/a2dissite default
	/usr/sbin/a2ensite mydlp
}

cleanup_sslcrtd_db() {
	/etc/init.d/squid3 stop
	rm -rf $SQUIDSSLCRTDDIR
	/etc/init.d/squid3 start
}

generate_init_epoch() {
	[ -e "$INIT_EPOCH" ] || ( $ECHOBIN -n "$($DATEBIN +%s)" > $INIT_EPOCH )
}

chown_quarantine() {
	$CHOWN -R 33.33 $QUARANTINE_DIR
}

chown_revision() {
	$CHOWN -R jetty.adm $REVISION_DIR
}

remove_root_webapp() {
	/bin/rm -f /var/lib/jetty/webapps/root.war
	/bin/rm -rf /var/lib/jetty/webapps/root/
}

configure_jetty() {
	/etc/init.d/jetty stop > /dev/null
	/usr/sbin/update-rc.d jetty disable 2345
	/bin/cp -f /usr/share/mydlp/sysconf/jetty/jetty.default /etc/default/jetty
	/bin/cp -f /usr/share/mydlp/sysconf/jetty/jetty.conf /etc/jetty/jetty.conf
	/bin/cp -f /usr/share/mydlp/sysconf/jetty/jetty-ajp.xml /etc/jetty/jetty-ajp.xml
	/bin/cp -f /usr/share/mydlp/sysconf/jetty/jetty.xml /etc/jetty/jetty.xml
}

install_webapp() {
	/etc/init.d/jetty stop > /dev/null
	/bin/cp -f /usr/share/mydlp/ui/mydlp-ui-webapp.war /var/lib/jetty/webapps/root.war
}

chown_solr_data() {
	/etc/init.d/tomcat6 stop > /dev/null
	$CHOWN -R tomcat6.tomcat6 /var/lib/mydlp/solr 
}

configure_tomcat() {
	/etc/init.d/tomcat6 stop > /dev/null
	/usr/sbin/update-rc.d tomcat6 disable 2345
	/bin/cp -f /usr/share/mydlp/sysconf/jetty/tomcat6.default /etc/default/tomcat6
	/bin/cp -f /usr/share/mydlp/sysconf/tomcat/server.xml /etc/tomcat6/server.xml
}

restart_rsyslog() {
	for f in $(/bin/ls $LOG_DIR)
	do
		local LOGFILE="$LOG_DIR""$f"
		local CURRENT_USER_GROUP=$(/usr/bin/stat -c "%U.%G" $LOGFILE)
		if [ -n "$CURRENT_USER_GROUP" -a "$CURRENT_USER_GROUP" == "$LOGFILE_USER_GROUP" ]; then
			true
		else
			echo "Correcting ownership of log file ($f) ..."
			$CHOWN -f $LOGFILE_USER_GROUP $LOGFILE || true
		fi
	done
	/etc/init.d/rsyslog restart 2>&1 > /dev/null
}

fix_jetty_init_grep_typo() {
	/bin/grep -q '\[:space:\]' /etc/init.d/jetty && /bin/sed -i -s 's/\[:space:\]/[[:space:]]/g' /etc/init.d/jetty
}

patch_mysql_schema() {
	if [ -n "$NOLOCALMYSQL" -a "$NOLOCALMYSQL" == "true" ]; then
                true;
	else
		local PACKAGEOLDVERSION=$1
		for p in $(/bin/ls $SCHEMADIFFDIR)
		do
			local PATCHVERSION=$(echo $p|/bin/sed -s 's/___.*$//g')
			if $DPKGBIN --compare-versions "$PATCHVERSION" gt "$PACKAGEOLDVERSION"; then
				local PATCHDB=$(echo $p|/bin/sed -sr 's/^[0-9\.-]+___//g'|/bin/sed -s 's/___.*$//g')
				local PATCHFILE="$SCHEMADIFFDIR""$p"
				echo "Applying database ($PATCHDB) schema patch for $PATCHVERSION : $p ..."
				$MYSQLC $PATCHDB < $PATCHFILE
			fi
		done
		true
        fi
}

case "$1" in
    configure)
	fix_jetty_init_grep_typo
	if [ -n "$2" ]; then
		# update
		patch_mysql_schema $2
		if $DPKGBIN --compare-versions "$2" le "0.9.163-1"; then
			cleanup_keys
			generate_keys
			cleanup_sslcrtd_db
		fi
		if $DPKGBIN --compare-versions "$2" le "0.9.193-1"; then
			configure_jetty
			chown_solr_data
			configure_tomcat
		fi
		restart_rsyslog
	else
		# first install
		generate_init_epoch
		generate_keys
		configure_apache
		configure_jetty
		chown_quarantine
		configure_apache
		configure_jetty
		chown_revision
		chown_solr_data
		configure_tomcat
		restart_rsyslog
	fi
	remove_root_webapp
	install_webapp
	;;
    abort-upgrade|abort-deconfigure|abort-remove)
	;;

    *)
	echo "$0 called with unknown argument \`$1'" 1>&2
	exit 1
	;;
esac

#DEBHELPER#
exit 0
