#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

ERLPIDFILE=/var/run/mydlp/mydlp.pid
ERLPROCNAME=beam
JAVAPIDFILE=/var/run/mydlp/backend.pid
JAVAPROCNAME=jsvc
SQUIDPIDFILE=/var/run/squid3.pid
SQUIDPROCNAME=squid3

INITSCRIPT=/etc/init.d/mydlp
POSTFIXINIT=/etc/init.d/postfix
SQUIDINIT=/etc/init.d/squid3

ERRORLOGFILE=/var/log/mydlp/error.log

WATCHDOGLOGFILE=/var/log/mydlp/watchdog.log

MQLIMIT=100

if test -f /etc/default/mydlp; then
        . /etc/default/mydlp
fi

function isAlive {
        local PIDFILE=$1
        local PROCNAME=$2

        if [ ! -e "$PIDFILE" ]; then
                return 1
        fi

        local PID=$(cat $PIDFILE)
        ps -p $PID|grep -q $PROCNAME
}

function isPortOpen() {
        local PORTNUM=$1
        netstat -nltp 2>/dev/null|grep LISTEN|awk '-F ' '{print $4;}'|awk -F: '{print $NF;}'|grep -qe "^$PORTNUM$"
}

function waitForPort() {
        local PORTNUM=$1
        for i in $(seq 15); do
                sleep 1
                if isPortOpen $PORTNUM; then break; fi
        done
}

function isIcapOpen() {
        isPortOpen 1344 || \
                ( echo "ICAP port is not open !!!" && false )
}

function isSmtpCFOpen() {
        isPortOpen 10026 || \
                ( echo "SMTP CF port is not open !!!" && false )
}

function isCachePortOpen() {
        isPortOpen 3128 || \
                ( echo "HTTP cache port is not open !!!" && false )
}

function waitForIcap() {
        waitForPort 1344
}

function waitForSmtpCF() {
        waitForPort 10026
}

function isSquidProcAlive {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0	
	fi
        isAlive $SQUIDPIDFILE $SQUIDPROCNAME || \
                ( echo "Squid cache is dead !!!" && false )
}

function isErlAlive {
        isAlive $ERLPIDFILE $ERLPROCNAME || \
                ( echo "MyDLP Erlang Engine is dead !!!" && false )
}

function isJavaAlive {
        isAlive $JAVAPIDFILE $JAVAPROCNAME || \
                ( echo "MyDLP Java Backend is dead !!!" && false )
}

function stopSquid() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0	
	fi
        echo "Killing Squid..."
        $SQUIDINIT stop > /dev/null 2>&1
        sleep 2
	
        [ -n "$(pgrep $SQUIDPROCNAME)" ] && killall $SQUIDPROCNAME
        sleep 1
        [ -n "$(pgrep $SQUIDPROCNAME)" ] && killall -9 $SQUIDPROCNAME
        sleep 1
        echo "Killed Squid..."
        true
}

function cleanSquidCache() {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0	
	fi
        echo "Cleaning Squid cache directories..."
        rm -rf /var/spool/squid3/*
        echo "Cleaned."
}

function startSquid {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0	
	fi
        echo "Starting Squid..."
        $SQUIDINIT start > /dev/null 2>&1
        echo "Started Squid."
}

function stopMyDLP {
        echo "Stopping MyDLP..."
        $INITSCRIPT stop > /dev/null 2>&1
        sleep 2
        $INITSCRIPT stop > /dev/null 2>&1
        sleep 2
        echo "Stopped MyDLP..."
}

function startMyDLP {
        echo "Starting MyDLP..."
        $INITSCRIPT start > /dev/null 2>&1
        waitForIcap
        echo "Started MyDLP."
        echo "Reconfiguring Squid..."
        squid3 -k reconfigure
        echo "Flushing Postfix Mail Queue..."
}

function stopPostfix {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
        $POSTFIXINIT stop > /dev/null 2>&1
}

function startPostfix {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
        $POSTFIXINIT start > /dev/null 2>&1
}

function backupErrorLog {
        echo "Backing up error log."
        local CURRENTEPOCH=$(date +%s)
        local NEWERRORLOGFILE="$ERRORLOGFILE.$CURRENTEPOCH"
        mv -f $ERRORLOGFILE $NEWERRORLOGFILE
        echo "Backed up error log. Compression process is running at background."
        gzip $NEWERRORLOGFILE &
}

function logRestart {
        echo "$(date) -> MyDLP is not running! Restarting. " >> $WATCHDOGLOGFILE
}

function getMQSize {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		echo 0
		return 0
	fi
        local PQRESP=$(postqueue -p|tail -1)
        if [ -n "$PQRESP" ]; then
                if [ "$PQRESP" == "Mail queue is empty" ]; then
                        echo 0
                else
                        echo $PQRESP|cut -d' ' -f5
                fi
        else
                echo 0
        fi
}

function doesMQhaveConnRefusedMsg() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
	postqueue -p|grep -q -F '(connect to 127.0.0.1[127.0.0.1]:10026: Connection refused)'
}

function doesMQhaveLostConnMsg() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
	postqueue -p|grep -q -F '(lost connection with 127.0.0.1[127.0.0.1] while sending end of data -- message may be sent more than once)'
}

function hasMQPassedLimit() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
        local MQSIZE=$(getMQSize)
        [ "$MQSIZE" -le "$MQLIMIT" ]
}

function isMQSane() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
	doesMQhaveConnRefusedMsg
}

function flushMQ() {
	if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
		return 0
	fi
        postqueue -f
}

function restartMyDLP {
        stopPostfix
        stopMyDLP
        backupErrorLog
        startMyDLP
        startPostfix
	flushMQ
}

function restartSquid {
        stopSquid
        cleanSquidCache
        startSquid
}

function isMyDLPAlive {
        isJavaAlive && isErlAlive && isIcapOpen && isSmtpCFOpen && doesMQhaveConnRefusedMsg
}

function isSquidAlive {
	if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
		return 0	
	fi
        isSquidProcAlive && isCachePortOpen
}

isMyDLPAlive || ( echo "MyDLP is not properly running. Restarting MyDLP..." && restartMyDLP )

if [ -n "$NOSQUID" -a "$NOSQUID" == "true" ]; then
	true
else
	isSquidAlive || ( echo "Squid is not properly running. Restarting Squid..." && restartSquid )
fi

if [ -n "$NOPOSTFIX" -a "$NOPOSTFIX" == "true" ]; then
	true
else
	isMQSane || ( echo "Flushing MQ..." && flushMQ )
fi

